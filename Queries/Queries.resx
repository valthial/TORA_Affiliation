<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddEntriesToAffiliation" xml:space="preserve">
    <value>SET XACT_ABORT ON
DECLARE @TranName VARCHAR(50) = 'AffiliationServiceAggration';

-- IF PreAggregationAffi table exists, delete it
IF OBJECT_ID('tempdb..#PreAggregationAffi') IS NOT NULL DROP TABLE #PreAggregationAffi

BEGIN TRANSACTION @TranName; 

-- Fill the PreAggregationAffi table while adding InvoicingID and SelfBillingID
select ID
     , InvoicingID = ( case when PaymentMethod = 2
                            then ( select U_TORA_TIC_RetailBp COLLATE SQL_Latin1_General_CP850_CI_AS
                                   from [{0}].[dbo].[OITM]
                                   where U_TORA_TIC_CmsToraCode COLLATE SQL_Latin1_General_CP850_CI_AS = CMS_Transactions.ProductID )
                            else case when ( select FatherCard COLLATE SQL_Latin1_General_CP850_CI_AS
                                             from [{0}].[dbo].[OCRD]
                                             where CardCode COLLATE SQL_Latin1_General_CP850_CI_AS = CMS_Transactions.MerchantID ) is null 
                                      then CMS_Transactions.MerchantID
                                      else ( select FatherCard COLLATE SQL_Latin1_General_CP850_CI_AS
                                             from [{0}].[dbo].[OCRD]
                                             where CardCode COLLATE SQL_Latin1_General_CP850_CI_AS = CMS_Transactions.MerchantID )
                                 end
                       end )
     , SelfBillingID = ( case when ( select FatherCard COLLATE SQL_Latin1_General_CP850_CI_AS
                                     from [{0}].[dbo].[OCRD]
                                     where CardCode COLLATE SQL_Latin1_General_CP850_CI_AS = CMS_Transactions.MerchantID ) is null 
                              then CMS_Transactions.MerchantID
                              else ( select FatherCard COLLATE SQL_Latin1_General_CP850_CI_AS
                                     from [{0}].[dbo].[OCRD]
                                     where CardCode COLLATE SQL_Latin1_General_CP850_CI_AS = CMS_Transactions.MerchantID )
                         end )
     , TransactionDate = ( case when TransactionTypeID = 'D' then ClosingTransactionDate else CancelTransactionDate end )
     , ProductID
     , PaymentMethod
     , TransactionTypeID
     , TransactionAmount
     , CommissionAmount
     , Quantity
     , CmsId = ( select U_ItemCode_SAP COLLATE SQL_Latin1_General_CP850_CI_AS
                 from [{0}].[dbo].[OITM]
                 where U_ORA_CMSSAPITEMS COLLATE SQL_Latin1_General_CP850_CI_AS = ProductID )

into #PreAggregationAffi
from CMS_Transactions
where IsRead != 'Y'
      and TransactionCategoryID = 'VP'
      and (SourceID = 'TW' OR SourceID = 'BE')


-- Insert aggregated entries to [Affiliation] table
insert into [{0}].[dbo].[@TORA_SELFBILLINGS]

   ( U_ItemID

   , U_Value

   , U_CustomerID

   , U_TransactionDate

   , U_Quantity

   , U_TransactionType

   , U_CardOrBill

   , U_RecordSoure

   , U_GlAccount

   , U_DiscountPercent

   , U_Invoiced

   )

select U_ItemID = ( select U_CMS_Id COLLATE SQL_Latin1_General_CP850_CI_AS

                 from [{0}].[dbo].[OITM]

                 where ItemCode = CmsId )

     , U_Value = SUM(TransactionAmount)

     , U_CustomerID = SelfBillingID

     , U_TransactionDate = CONVERT(NVARCHAR(50), TransactionDate, 12)

     , U_Quantity = SUM(Quantity)

     , U_TransactionType = TransactionTypeID

     , U_CardOrBill = 'BL'

     , U_RecordSoure = 'CMS'

     , U_GlAccount = NULL

     , U_DiscountPercent = NULL

     , U_Invoiced = NULL

from #PreAggregationAffi

group by SelfBillingID

       , TransactionDate

       , CmsId

       , PaymentMethod

       , TransactionTypeID

-- Update the CMS_Transactions table to indicate that the lines have been added to [Affiliation]
UPDATE CMS_Transactions
set IsRead = 'Y'
  , ReadDate = CURRENT_TIMESTAMP
  , ReadTime = CURRENT_TIMESTAMP
from #PreAggregationAffi
     JOIN CMS_Transactions on CMS_Transactions.ID = #PreAggregationAffi.ID

COMMIT TRANSACTION @TranName;</value>
  </data>
  <data name="GetAffiTransations" xml:space="preserve">
    <value>select ID
     , TransactionTypeID
     , TransactionDate
     , InvoicingID
     , ProductID
     , Quantity
     , PaymentMethod
     , TransactionAmount
     , CommissionAmount
     , [Count]
from AffiTransactions</value>
  </data>
</root>